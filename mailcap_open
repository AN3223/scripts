#!/bin/sh -ef
# shellcheck disable=SC2209,SC2086

help() {
	cat - >&2 <<EOF
mailcap_open - file opener based on mailcap files

mailcap_open [file | URL]

...and the heavy lifting is done by the mailcap file(s) (see MAILCAPS
below). If the file argument is omitted or - then the standard input
will be read instead.

IMPORTANT: Occurrences of %s must be double quoted (or unquoted if you
want word-splitting) in your mailcap files. This is because it is
actually substituted for a shell variable, not a filename. This is
done on purpose to avoid issues with special characters.
So don't single quote %s! It will cause errors! You have been warned!
Also don't forget to set the TERMCMD environment variable, see below.

The following environment variables are used:

TERMCMD
	The prefix command for spawning programs in a terminal, e.g. xterm -e
	for xterm. There is no default, this MUST be set if mailcap_open
	isn't being spawned from a terminal.

MAILCAPS
	The colon-delimited mailcap search path defined in RFC 1524,
	defaults to:
		~/.mailcap:/etc/mailcap:/usr/etc/mailcap:/usr/local/etc/mailcap

MIMER
	The command used to get the mimetype of a file, defaults to:
		xdg-mime query filetype

MCO_NEEDSTERMINAL
	If set, mailcap_open will always act like needsterminal is set.
	Useful for preventing mailcap_open from opening the file in the
	background.

MCO_DOWNLOADER
	The command used to download from URLs if MCO_HANDLER is unset,
	defaults to curl

MCO_HANDLER
	A command that may override the handling of the file mailcap_open
	was invoked with (unless the file was stdin). A handler will be
	invoked like so:

	handler {file | URL}

	If MCO_HANDLER exits with an error code then mailcap_open will
	assume the handler has already opened the file and mailcap_open will
	do an early exit (never interpreting the mailcap file).

	If MCO_HANDLER exits successfully then the mailcap will be
	interpreted as normal.

	If MCO_HANDLER is unset then mailcap_open will default to using
	MCO_DOWNLOADER to handle URLs, and use the mailcap file for handling
	normal files.

	Ideally a custom handler should always throw an error in the case of
	a URL.

PLEASE_USE_NOHUP
	mailcap_open will usually use setsid to detach a process, but you can
	set this variable to use nohup instead.

	This will only have an effect when the prerequisites for detaching a
	process have already been met. If setsid isn't available on your
	system then mailcap_open will automatically fallback to nohup without
	the need for this environment variable.
EOF
}

# gsub var target replacement [target replacement...]
gsub() {
	var="$1"; eval _var='$'"$var"; shift 1;
	while :; do
		case "$_var" in
			*"$1"*)
				_var="${_var%%"$1"*}${2}${_var#*"$1"}"
				;;
			*)
				shift 2
				if [ "$#" -eq 0 ]; then
					break
				fi
				;;
		esac
	done
	eval "$var"='$_var'; unset -v var _var;
}

# Strips surrounding whitespace from a variable
strip_whitespace() {
	var="$1"; eval _var='$'"$var";
	IFS=' ' read -r "$1" <<-EOF
		$_var
	EOF
	unset -v var _var
}

set_trap() { trap 'rm -f "$tmp"' EXIT TERM QUIT HUP INT ABRT; }
unset_trap() { trap - EXIT TERM QUIT HUP INT ABRT; }

case "$1" in
	--help|-h) help; exit 0;;
	*) ;;
esac

FILENAME=${1:-'-'}
unset -v tmp; set_trap;
if [ "$FILENAME" = '-' ]; then
	tmp=$(mktemp)
	cat - > "$tmp"
	FILENAME=$tmp
elif [ "$MCO_HANDLER" ]; then
	$MCO_HANDLER "$FILENAME" || exit 0
else
	case "$FILENAME" in
		*://*)
			tmp=$(mktemp)
			${MCO_DOWNLOADER:-curl -LSsf --} "$FILENAME" > "$tmp"
			FILENAME=$tmp
			;;
		*)
			;;
	esac
fi

: "${MAILCAPS:=${HOME:?}/.mailcap:/etc/mailcap:/usr/etc/mailcap:/usr/local/etc/mailcap}"

MAILCAP=$(IFS=:; cat $MAILCAPS 2> /dev/null || :)
: "${MAILCAP:?No mailcap files (or all mailcap files are empty)}"

MIMETYPE=$(${MIMER:=xdg-mime query filetype} "$FILENAME")

if [ -t 0 ] && [ -t 1 ] && [ -t 2 ]; then
	TTY=$(tty) || unset -v TTY
else
	unset -v TTY
fi

if [ ! "$TTY" ]; then
	: "${TERMCMD:?'TERMCMD must be set (e.g. xterm -e)'}"
fi

IFS=';'
exec <<-EOF
	$MAILCAP
EOF
while read -r FILE_MIMETYPE cmd opts; do
	unset -v copiousoutput needsterminal skip

	# Skip comments and empty lines
	case "$FILE_MIMETYPE" in
		''|\#*) continue ;;
		*) ;;
	esac

	strip_whitespace FILE_MIMETYPE

	# Skip non-matching mimetypes
	# shellcheck disable=SC2254 # (allow globs)
	case "$MIMETYPE" in
		"$FILE_MIMETYPE"|$FILE_MIMETYPE) ;;
		*) continue ;;
	esac

	for opt in $opts; do
		strip_whitespace opt
		case "$opt" in
			needsterminal) needsterminal=1 ;;
			copiousoutput) copiousoutput=1 ;;
			test=*)
				if ! eval "${opt#test=}" > /dev/null 2>&1; then
					skip=1; break;
				fi
				;;
			notes=*) ;;
			description=*) ;;
			nametemplate=*) ;;
			x11-bitmap=*) ;;
			compose=*) ;;
			composetyped=*) ;;
			print=*) ;;
			textualnewlines=*) ;;
			x-*) ;;
			*)
				echo "Warning, unrecognized option: $opt" >&2
				;;
		esac
	done

	if [ "$skip" ]; then
		continue
	fi

	if [ "$MCO_NEEDSTERMINAL" ]; then
		needsterminal=1
	fi

	if [ "$needsterminal" ] && [ ! "$TTY" ]; then
		spawn_terminal=1
		detach=1
	elif [ ! "$needsterminal" ]; then
		unset -v spawn_terminal
		detach=1
	else
		unset -v spawn_terminal detach
	fi

	# fallback to nohup, since setsid isn't POSIX
	if [ ! "$PLEASE_USE_NOHUP" ] && command -v setsid > /dev/null 2>&1; then
		detacher=setsid
	else
		detacher=nohup
	fi

	# usually wouldn't do this as a function but this needs to be able
	# to run in the background and foreground
	open() {
		if [ ! "$needsterminal" ] && [ ! "$copiousoutput" ]; then
			exec > /dev/null 2>&1
		elif [ "$needsterminal" ] && [ "$TTY" ]; then
			exec < "$TTY"
		fi

		# Put file contents into stdin if %s is missing
		case "$cmd" in *%s*) ;; *)
			exec < "$FILENAME" ;;
		esac

		gsub cmd %s '$FILENAME' %t "$FILE_MIMETYPE"

		IFS=' '
		eval "${detach:+${detacher}}" \
			"${spawn_terminal:+$TERMCMD}" \
			"$cmd" \
			"${copiousoutput:+| ${PAGER:-less}}" \
			|| :
	}

	if [ "$detach" ]; then
		# only the child process should have the trap
		unset_trap
		(set_trap; open) &
	else
		open
	fi

	exit 0
done

exit 1

