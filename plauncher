#!/bin/sh -e
# plauncher - POSIX launcher script
#
# plauncher will take a command from the user and run the command. A
# history of commands will be shown to the user to select from, or the
# user may type in a command which will be ran and added to the history.
#
# Arguments provided to plauncher will be interpreted as a command to
# run the user's selected command with (i.e. plauncher i3-msg exec,
# plauncher swaymsg exec). The command provided as an argument will be
# given the user's selected command as a single argument instead of
# word-splitting the user's command.
#
# plauncher's user interface is basic, use Tab or ^P to traverse
# backward through the command history, use ^N to traverse forward
# through the command history, and everything else will be interpreted
# as a query to search through the command history.
#
# You must set the $TERMCMD environment variable, something like "xterm
# -e", so applications may be launched in your terminal of choice.
#

getch() { dd bs=1 count=1 2> /dev/null ; }
cleanterm() { stty sane; printf '\n'; }

write_history() {
	deduped=$(grep -Fxve "$1" < "$CONFDIR/recent" || :)
	cat > "$CONFDIR/recent" <<-EOF
		$deduped
		$1
	EOF
}

: "${TERMCMD:?'$TERMCMD must be set (i.e. xterm -e)'}"

# you can use showkey -a to figure out the octal value for a key
KEY_BACKSPACE=$(printf '\177')
KEY_CTRL_U=$(printf '\025')
KEY_CTRL_W=$(printf '\027')
KEY_CTRL_P=$(printf '\020')
KEY_CTRL_N=$(printf '\016')
KEY_ESCAPE=$(printf '\033')
KEY_TAB=$(printf '\t')
EL=$(printf '\033[K')
NL="
"

# Ensure all of the config files exist
CONFDIR="${XDG_CONFIG_HOME:-${HOME:?}/.config}/plauncher"
mkdir -p "$CONFDIR"
: >> "$CONFDIR/recent" >> "$CONFDIR/background" >> "$CONFDIR/terminal"

stty -icanon -echo -nl
unset -v cmd cursor list_length appended
while :; do
	if [ "$cursor" ]; then
		cmd=$(sed -n "${cursor}p") <<-EOF
			$list
		EOF
	elif [ ! "$list" ] && [ "$appended" ]; then
		: # don't rerender if we know there won't be anything to render
	else
		# only render the history if the history isn't being traversed
		list=$(grep -Fie "$cmd" < "$CONFDIR/recent" || :)
		# place EL characters at the end of each line to clear garbage
		list_w_el=$(sed "s/$/$EL/") <<-EOF
			$list
		EOF
	fi

	# crazy parameter expansion just prevents stray newlines
	printf '\033[H%s' "${list:+${list_w_el}${NL}}" >&2

	# print prompt w/ current command
	printf '\r> %s\033[J' "$cmd" >&2

	c=$(getch)
	[ "$c" ] || break
	case "$c" in
		"$KEY_ESCAPE")
			cleanterm
			exit 0
			;;
		"$KEY_CTRL_P"|"$KEY_TAB")
			if [ "$cursor" ]; then
				[ "$cursor" -gt 1 ] && cursor=$((cursor - 1))
			else
				list_length=$(wc -l) <<-EOF
					$list
				EOF
				cursor="$list_length"
			fi
			;;
		"$KEY_CTRL_N")
			if [ "$cursor" ] && [ "$cursor" -lt "$list_length" ]; then
				cursor=$((cursor + 1))
			else # reached end of history
				unset -v cmd cursor list_length appended
			fi
			;;
		"$KEY_CTRL_U") # clear line
			unset -v cmd cursor list_length appended
			;;
		"$KEY_CTRL_W") # delete last word from line
			cmd=$(sed 's/[ ]*[^ ]*$//') <<-EOF
				$cmd
			EOF
			unset -v cursor list_length appended
			;;
		"$KEY_BACKSPACE")
			cmd=${cmd%?}
			unset -v cursor list_length appended
			;;
		*)
			# only append characters to the command if they aren't
			# whacky characters
			cval=$(od -A n -N 1 -t u1) <<-EOF
				$c
			EOF
			if [ "$cval" -ge 32 ]; then
				cmd="${cmd}${c}"
				appended=1
				unset -v cursor list_length
			fi
			;;
	esac
done
cleanterm

unset -v terminal
if grep -Fxqe "$cmd" < "$CONFDIR/terminal"; then
	terminal=1
elif grep -Fxqe "$cmd" < "$CONFDIR/background"; then
	:
else
	printf '%s\n' "How should $cmd be ran?" \
		'[1] terminal' \
		'[2] background (default)' >&2
	read -r answer
	case "$answer" in
		1)
			[ "$anonymous" ] || printf '%s\n' "$cmd" >> "$CONFDIR/terminal"
			terminal=1
			;;
		*)
			[ "$anonymous" ] || printf '%s\n' "$cmd" >> "$CONFDIR/background"
			;;
	esac
fi

unset -v anonymous
case "$cmd" in
	' '*) anonymous=1 ;;
	'') exit 0 ;;
	*) write_history "$cmd" ;;
esac

if [ "$*" ]; then
	exec "$@" "${terminal:+$TERMCMD }$cmd"
else
	eval exec "${terminal:+$TERMCMD }$cmd"
fi

