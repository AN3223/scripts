#!/bin/sh -e
# Simple script for sending/receiving/maintaining notifications, for use
# with status bars et al.
#
# The default behavior when supplied no arguments is to display the most
# recent notification.
#
# The notification file is stored at ~/.notify and each line represents
# a notification. Don't directly modify the file yourself, use this
# script instead to prevent data races.
#
# The following flags are recognized:
#
# -n msg...
#   Add notification msg. Multiple arguments to this flag will be
#   concatenated by the first character of the IFS (whitespace by
#   default).
#
# -d
#   Delete the most recent notification
#
# -r
#   Delete all notifications
#
# -
#   Concatenate stdin onto the end of the notification file
#

NOTIFY_FILE=$HOME/.snotify

# read stdin before grabbing lock, since reading stdin may take a while
if [ "$1" = '-' ]; then
	STDIN=$(cat -)
	[ "$STDIN" ] || exit 1
fi

# try to use a good lock implementation, fall back to something dirtier
LOCK=$NOTIFY_FILE.lock
if command -v flock > /dev/null 2>&1; then
	exec 9> "$LOCK"
	while ! flock -n 9; do
		sleep 0.1
	done
else
	trap 'rm -f "$LOCK"' EXIT QUIT HUP INT TERM ABRT
	while ! (set -C; : > "$LOCK"); do
		sleep 0.1
	done
fi

if [ "$*" ]; then
	case "$1" in
		-n)
			shift 1
			# avoid recording duplicate messages
			if grep -Fxqe "$*" "$NOTIFY_FILE"; then
				exit 0
			fi

			printf '%s\n' "$*" >> "$NOTIFY_FILE";
			;;
		-d)
			new=$(sed '$d' "$NOTIFY_FILE")
			cat > "$NOTIFY_FILE" <<-EOF
				$new
			EOF
			;;
		-r)
			rm "$NOTIFY_FILE"
			;;
		-)
			# avoid recording duplicate messages
			printf '%s\n' "$STDIN" | while read -r line; do
				if grep -Fxqe "$line" "$NOTIFY_FILE"; then
					continue
				fi
				printf '%s\n' "$line" >> "$NOTIFY_FILE"
			done
			;;
		*)
			echo 'Invalid argument' >&2
			exit 1
			;;
	esac
else
	: >> "$NOTIFY_FILE"
	tail -n 1 "$NOTIFY_FILE"
fi

