#!/bin/sh -e
# Simple script for sending/receiving/maintaining notifications, for use
# with status bars et al.
#
# The default behavior when supplied no arguments is to display the most
# recent notification.
#
# The notification file is stored at ~/.notify and each line represents
# a notification. Don't directly modify the file yourself, use this
# script instead to prevent data races.
#
# The following flags are recognized:
#
# -n msg...
#   Add notification msg. Multiple arguments to this flag will be
#   concatenated by the first character of the IFS (whitespace by
#   default).
#
# -d
#   Delete the most recent notification
#
# -r
#   Delete all notifications
#
# -
#   Concatenate stdin onto the end of the notification file
#

NOTIFY_FILE=$HOME/.snotify

# try to use a good lock implementation, fall back to something dirtier
LOCKN=$NOTIFY_FILE.lock
if command -v flock > /dev/null 2>&1; then
	exec 9> "$LOCKN"
	while ! flock -n 9; do
		sleep 0.1
	done
else
	trap 'rm -f "$LOCKN"' EXIT QUIT HUP INT TERM ABRT
	while ! (set -C; : > "$LOCKN"); do
		sleep 0.1
	done
fi

[ "$*" ] && case "$1" in
	-n)
		shift 1
		# avoid recording duplicate messages
		if grep -Fxq "$*" "$NOTIFY_FILE"; then
			exit
		fi

		printf '%s\n' "$*" >> "$NOTIFY_FILE";
		exit
		;;
	-d)
		tmp=$(mktemp)
		sed '$d' "$NOTIFY_FILE" > "$tmp"
		cat "$tmp" > "$NOTIFY_FILE"
		rm "$tmp"
		exit
		;;
	-r)
		rm "$NOTIFY_FILE"
		exit
		;;
	-)
		# avoid recording duplicate messages
		cat - | while read -r line; do
			if grep -Fxq "$line" "$NOTIFY_FILE"; then
				continue
			fi
			printf '%s\n' "$line" >> "$NOTIFY_FILE"
		done
		;;
	*)
		echo 'Invalid argument' >&2
		exit 1
		;;
esac

: >> "$NOTIFY_FILE"
tail -n 1 "$NOTIFY_FILE"

