#!/bin/sh -e

help() {
	cat - >&2 <<EOF
wflashcard - weighted flashcard viewer

wflashcard [-p penalty] [-r reward] [-m minweight] files...

The file format is tab separated where the (optional) first field is the 
weight, the second field is the "front" of the flashcard (shown to the 
user), and the third field is the "back" of the flashcard (the expected 
answer). If the weight is omitted then it will be set to 1.0. Blank 
lines and comment lines are valid.

Incorrect answers will have their weight divided by "penalty", correct 
answers will have their weight multiplied by "reward", and weights will 
not be allowed to fall below "minweight".
EOF
}

penalty=1.25
reward=1.25
minweight=0.1
while getopts 'hp:r:m:' o; do
	case "$o" in
		p) penalty="$OPTARG" ;;
		r) reward="$OPTARG" ;;
		m) minweight="$OPTARG" ;;
		h) help; exit 0 ;;
		*) help; exit 1 ;;
	esac
done
shift $((OPTIND-1))

awk -F "$(printf '\t')" -v tty="$(tty)" -v penalty="$penalty" -v reward="$reward" -v minweight="$minweight" '
function emphatic(s) { printf("\n----------------\n%s\n----------------\n\n", s) }

BEGIN { OFS = FS }

/^$/ || /^#/ { next } # skip blank or comment lines

# handle missing weight by setting it to 1
$1 != "" && $2 != "" && $3 == "" { $3 = $2; $2 = $1; $1 = 1; }

{ sum += weight[NR] = $1; front[NR] = $2; back[NR] = $3; filename[NR] = FILENAME; }

END {
	if (sum == 0) {
		print "Sum of weights is zero"
		exit
	}

	srand()
	while (1) {
		target = rand() * sum
		isum = 0
		for (i = 1; i <= NR; i++)
			if (weight[i] && target <= (isum += weight[i]))
				break

		printf("%s\n> ", front[i])
		response = ""; getline response < tty;
		if (response == "") {
			updatew = 0
			break
		} else if (response == back[i]) {
			updatew = weight[i] / penalty - weight[i]
			emphatic("Correct!")
		} else {
			emphatic("The correct answer was " back[i] ". Were you correct? (y/N)")
			printf("> ")
			response = ""; getline response < tty;
			if (response == "y" || response == "Y")
				updatew = weight[i] / penalty - weight[i]
			else
				updatew = weight[i] * reward - weight[i]
		}
		if ((weight[i] + updatew) < minweight)
			updatew = minweight - weight[i]
		weight[i] += updatew
		sum += updatew
	}

	for (i = 1; i <= NR; i++)
		print weight[i], front[i], back[i] > filename[i]
}' "$@"

