#!/bin/sh
# This is a script inspired by dmenu_recency. You must set the $TERMCMD environment variable,
# something like "xterm -e", so applications may be launched in your terminal of choice.

# This script doesn't execute commands, instead they're just printed to stdout. Execute the
# stdout in whatever fashion you want.

# This script uses custom keybinds for ease of use in application selection:
#   tab: Replace query string with the current selection, like Bash tab complete.
#   enter: print-query, i.e. just print the query string regardless of the selection.

err() { echo "ERROR: $1" >&2; exit 1; }

# Lists all of the executables on $PATH. Slow and ugly, but portable!
commands() {
	IFS_="$IFS"; IFS=:;
	for path in $PATH; do
		find "$path" -maxdepth 1 -executable -exec basename {} \; 2> /dev/null
	done
	IFS="$IFS_"
}

[ ! "$TERMCMD" ] && err 'You must set $TERMCMD to run commands in a terminal, i.e. "xterm -e"'

# Find the cache/config directories and ensure they exist
cache_dir="${XDG_CACHE_HOME:-$HOME/.cache}/fzf-recent"
config_dir="${XDG_CONFIG_HOME:-$HOME/.config}/fzf-recent"
mkdir -p "$cache_dir" "$config_dir"

# Ensure all of the config/cache files exist
[ ! -f "$cache_dir/all" ] && commands > "$cache_dir/all"
touch "$cache_dir/recent" "$config_dir/background" "$config_dir/terminal"

# Filter out duplicates and pass commands to fzf (+ custom keybinds)
opts='--bind=enter:print-query,tab:replace-query+top'
selection=$(awk '!seen[$0]++' "$cache_dir/recent" "$cache_dir/all" | fzf $opts)

# Ensure the selection exists, and append it to the recent commands
[ ! "$selection" ] && err 'Nothing was selected!'
printf '%s\n' "$selection" >> "$cache_dir/recent"

# If the command has been ran before, run it with the same config,
# otherwise prompt the user for how the command should be run.
if grep -Fxq "$selection" "$config_dir/background"; then
	printf '%s\n' "$selection"
elif grep -Fxq "$selection" "$config_dir/terminal"; then
	printf '%s\n' "$TERMCMD $selection"
else
	header="Run $selection in the background or in the terminal?"
	choice=$(printf '%s\n%s' 'background' 'terminal' | fzf --header="$header")
	
	if [ "$choice" = 'background' ]; then
		printf '%s\n' "$selection" | tee -a "$config_dir/background"
	elif [ "$choice" = 'terminal' ]; then
		printf '%s\n' "$selection" >> "$config_dir/terminal"
		printf '%s\n' "$TERMCMD $selection"
	else
		err 'Nothing was selected!'
	fi
fi

