#!/bin/sh -e
# This is a script inspired by dmenu_recency. You must set the $TERMCMD
# environment variable, something like "xterm -e", so applications may be
# launched in your terminal of choice.

# This script doesn't execute selected commands, they are instead printed to
# stdout. Execute the stdout in whatever fashion you want.

# This script uses custom keybinds for ease of use in application selection:
#  tab: Replace query string with the current selection, i.e. tab completion
#  enter: print-query, i.e. just print query string regardless of the selection

err() { printf '%s\n' "ERROR: $1" >&2; exit 1; }
tac() { sed '1!G;h;$!d' "$@"; }
list_choices() { awk '!seen[$0]++' "$cache_dir/recent" "$cache_dir/all"; }
list_path() {(
	# List all executables on $PATH
	IFS=:; for path in $PATH; do
		find "$path" -maxdepth 1 -executable \
			-exec basename {} \; 2> /dev/null
	done
)}

[ ! "$TERMCMD" ] && err '$TERMCMD must be set, i.e. "xterm -e"'

cache_dir="${XDG_CACHE_HOME:-$HOME/.cache}/fzf-recent"
config_dir="${XDG_CONFIG_HOME:-$HOME/.config}/fzf-recent"
mkdir -p "$cache_dir" "$config_dir"

# Ensure all of the config/cache files exist
[ ! -f "$cache_dir/all" ] && list_path > "$cache_dir/all"
: >> "$cache_dir/recent" >> "$config_dir/background" >> "$config_dir/terminal"

# Filter out duplicates and pass commands to fzf (+ custom keybinds)
opts='--bind=enter:print-query,tab:replace-query+top'
selection="$(list_choices | fzf $opts --history="$cache_dir/recent")"

# Ensure the selection exists
[ ! "$selection" ] && err 'Nothing was selected!'

# If the command has been ran before, run it with the same config,
# otherwise prompt the user for how the command should be run.
if grep -Fxq "$selection" "$config_dir/background"; then
	printf '%s\n' "$selection"
elif grep -Fxq "$selection" "$config_dir/terminal"; then
	printf '%s\n' "$TERMCMD $selection"
else
	msg="Run $selection in the background or in the terminal?"
	context=$(printf '%s\n%s' 'background' 'terminal' | fzf --header="$msg")
	
	if   [ "$context" = 'background' ]; then
		printf '%s\n' "$selection" | tee -a "$config_dir/background"
	elif [ "$context" = 'terminal' ]; then
		printf '%s\n' "$selection" >> "$config_dir/terminal"
		printf '%s\n' "$TERMCMD $selection"
	else
		err 'Nothing was selected!'
	fi
fi

# Remove duplicates from history while preserving order
tmp="$(mktemp)"
tac "$cache_dir/recent" | awk '!seen[$0]++' | tac > "$tmp"
mv "$tmp" "$cache_dir/recent"

